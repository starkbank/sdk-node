const rest = require('../utils/rest.js');


class Transaction {
    /**
     *
     * Transaction object
     *
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The 'create' function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     *
     * Parameters (required):
     * amount [integer]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: 'funds redistribution'
     * external_id [string]: unique id, generated by user, to avoid duplicated transactions. ex: 'transaction ABC 2020-03-30'
     * received_id [string]: unique id of the receiving workspace. ex: '5656565656565656'
     *
     * Parameters (optional):
     * tags [list of strings]: list of strings for reference when searching transactions (may be empty). ex: ['abc', 'test']
     * Attributes (return-only):
     * source [string, default None]: unique locator of the related entity in the API reference
     * id [string, default None]: unique id returned when Transaction is created. ex: '7656565656565656'
     * fee [integer, default None]: fee charged when transfer is created. ex: 200 (= R$ 2.00)
     * created [string, default None]: creation datetime for the boleto. ex: '2020-03-10 10:30:00.000'
     *
     */
    constructor({amount, description, externalId, receiverId, tags, id}) {
        this.amount = amount;
        this.description = description;
        this.externalId = externalId;
        this.receiverId = receiverId;
        this.tags = tags;
        this.fee = fee;
        this.created = created;
        this.source = source;
        this.id = id;
    }
}

exports.Transaction = Transaction;
let resource = exports.Transaction;

exports.create = async function (transactions, {user} = {}) {
    /**
     *
     * Create Transactions
     *
     * Send a list of Transaction objects for creation in the Stark Bank API
     *
     * Parameters (required):
     * transactions [list of Transaction objects]: list of Transaction objects to be created in the API
     *
     * Parameters (optional):
     * user [Project object]: Project object. Not necessary if starkbank.user was set before function call
     *
     * Return:
     * list of Transaction objects with updated attributes
     *
     */
    return rest.post(resource, transactions, user);
};

exports.get = async function (id, {user} = {}) {
    /**
     *
     * Retrieve a specific Transaction
     *
     * Receive a single Transaction object previously created in the Stark Bank API by passing its id
     *
     * Parameters (required):
     * id [string]: object unique id. ex: '5656565656565656'
     *
     * Parameters (optional):
     * user [Project object]: Project object. Not necessary if starkbank.user was set before function call
     *
     * Return:
     * Transaction object with updated attributes
     *
     */
    return rest.getId(resource, id, user);
};

exports.query = async function ({limit, status, tags, ids, after, before, user} = {}) {
    /**
     *
     * Retrieve Transactions
     *
     * Receive a generator of Transaction objects previously created in the Stark Bank API
     *
     * Parameters (optional):
     * limit [integer, default None]: maximum number of objects to be retrieved. Unlimited if None. ex: 35
     * external_ids [list of strings, default None]: list of external ids to filter retrieved objects. ex: ['5656565656565656', '4545454545454545']
     * after [string, default None] date filter for objects created only after specified date. ex: '2020-03-10'
     * before [string, default None] date filter for objects created only before specified date. ex: '2020-03-10'
     * user [Project object, default None]: Project object. Not necessary if starkbank.user was set before function call
     *
     * Return:
     * generator of Transaction objects with updated attributes
     *
     */
    let query = {
        limit: limit,
        status: status,
        tags: tags,
        ids: ids,
        after: after,
        before: before,
    };
    return rest.getList(resource, query, user);
};
